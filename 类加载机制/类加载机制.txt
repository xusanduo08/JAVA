

      javac           java
.java---------->.class----------------->程序开始运行
      编译            类加载到内存中
                      虚拟机开始运行


类加载过程粗略的可分为3步：加载、链接、初始化

加载
 ||
 \/
链接过程可细分为：验证、准备、解析
 ||
 \/
初始化
 ||
 \/
使用
 ||
 \/
卸载


加载：
    将class字节码加载到内存中，并将这些静态数据转换成方法区中的运行时数据结构，在堆中生成一个代表    这个类的java.lang.Class对象，最为方法区数据的访问入口
	class字节码可来自硬盘的字节码文件或者网络上的字节码或者是jar包，甚至也可以从数据库加载class
    字节码

链接：将java类的二进制代码合并到JVM的运行状态之中的过程(静态数据===>运行时数据的过程)
     验证：确保加载的类信息符合JVM规范，没有安全方面的问题
     准备：正式为类变量（static变量）分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配
     解析：虚拟机常量池内的符号引用替换为直接引用的过程，每个类都会有一个常量池

初始化：
     初始化阶段是执行类构造器<clinit>()方法(这里指的不是对象的构造器)的过程。类构造器<clinit>()方法是由编译器自动收集所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的。
     当初始化一个类的时候，如果发现其父类还没有初始化，则需要先触发其父类的初始化
     虚拟机会保证一个类的<clinit>()方法在多线程中被正确加锁和同步
     当访问一个java类的静态域时，只有真正声明这个域的类才会被初始化
