

      javac           java
.java---------->.class----------------->程序开始运行
      编译            类加载到内存中
                      虚拟机开始运行


类加载过程粗略的可分为3步：加载、链接、初始化

加载
 ||
 \/
链接过程可细分为：验证、准备、解析
 ||
 \/
初始化
 ||
 \/
使用
 ||
 \/
卸载


加载：
    将class字节码加载到内存中，并将这些静态数据转换成方法区中的运行时数据结构，在堆中生成一个代表这个类的java.lang.Class对象，作为方法区数据的访问入口
    class字节码可来自硬盘的字节码文件或者网络上的字节码或者是jar包，甚至也可以从数据库加载class
字节码

链接：将java类的二进制代码合并到JVM的运行状态之中的过程(静态数据===>运行时数据的过程)
     验证：确保加载的类信息符合JVM规范，没有安全方面的问题
     准备：正式为类变量（static变量）分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配
     解析：虚拟机常量池内的符号引用替换为直接引用的过程，每个类都会有一个常量池

初始化：
     初始化阶段是执行类构造器<clinit>()方法(这里指的不是对象的构造器)的过程。类构造器<clinit>()方法是由编译器自动收集所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的。
     当初始化一个类的时候，如果发现其父类还没有初始化，则需要先触发其父类的初始化
     虚拟机会保证一个类的<clinit>()方法在多线程中被正确加锁和同步
     当访问一个java类的静态域时，只有真正声明这个域的类才会被初始化


类缓存：
     标准的Java SE类加载器可以按照要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过，JVM垃圾收集器可以回收这些Class对象。

类加载器的层次结构：
		
		引导类加载器：
		    ||	1、用来加载java的和核心库，使用原生代码实现的（C语言），并不继承自java.lang.ClassLoader。
		    \/	2.加载扩展类和应用程序类加载器。并制定他们的父类加载器。
		扩展类加载器：
		    ||	1.用来加载java的扩展库，java虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载java类
		    \/	2.由sun.misc.Launcher$ExtClassLoader实现
		应用程序类加载器：
		    || 	1.它根据java应用的类路径（classpath、java.class.path）加载类。一般泪说，java应用的类都是由它来完成加载的
		    \/	2.由sun.misc.Launcher$AppClassLoader实现
		自定义类加载器：
			1.开发人员可以通过继承java.lang.ClassLoader类的方式实现自己的类加载器，以满足一些特殊的需求。

		除了引导类加载器（不继承、用C实现），其他所有类加载器都是用java实现，并且继承自java.lang.ClassLoader

java.class.ClassLoader类介绍：
      1.java.lang.ClassLoader类职责是根据一个指定类的名称找到或者生成其对应的字节代码，然后从这些字节代码中定义出一个java类，即java.lang.Class类的一个实例。
      2.ClassLoader还负责加载java应用所需的资源，如图像文件和配置文件等。

类加载器的代理模式：
	1.代理模式：交给其他加载器来加载指定的类。
	2.双亲委托机制：
            1).是代理模式下的一种特例。是指，某个特定的类加载器在接到加载类的请求时，首相将加载任务委托给父类加载器，依次追溯，知道最高的爷爷辈，如果父类加载器可以完成加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。
            2).双亲委托机制是为了保证java核心库的类型安全。这种机制能够保证不会出现用户自己能定义java.lang.Object类并进行使用的情况（定义还是能定义的，但是使用不了）
	    3).类加载器除了用于加载类，也是安全的最基本的屏障。
	3.双亲委托机制是代理模式的一种
	    1).并不是所有的类加载器都采用双亲委托机制。
	    2).tomcat服务器类加载器也使用代理模式，所不同的是它是首先尝试去加载某个类，如果找不到再代理给父类加载器。这与一般类加载器的顺序是相反的。
      